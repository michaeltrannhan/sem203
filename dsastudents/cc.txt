void meter(IList<int> *plist, string csvfile, int *ptr_sizes, int nsizes, int nexec = 10, int ntries = 10)
{
    //YOUR CODE HERE
    ofstream fout;
    fout.open(csvfile, ios::out | ios::app);
    fout << "size, addfirst(ms), addlast(ms), addrandpos(ms), removefirst(ms), removelast(ms), removerandpos(ms), getrandpos(ms)" << endl;
    //plist = new IList<int>[nsizes]();
    for (int i = 0; i < nsizes; i++)
    {
        for (int j = 0; j < ptr_sizes[i]; j++)
        {
            plist->add(j);
        }
        srand(time(0));
        double total1 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->add(0, 10);
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total1 += duration;
        }
        double total2 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->add(10);
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total2 += duration;
        }
        double total3 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->add((rand()%static_cast<int>(size)-1), 10);
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total3 += duration;
        }
        double total4 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->removeAt(0);
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total4 += duration;
        }
        double total5 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->removeAt((rand()%static_cast<int>(size)-1));
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total5 += duration;
        }
        double total6 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->removeAt((rand()%static_cast<int>(size)-1));
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total6 += duration;
        }
        double total7 = 0;
        for (auto size = 0; size < nexec * ntries; size++)
        {
            auto start = chrono::high_resolution_clock::now();
            //for(int i = 0; i < 626654; i++)
            plist->get((rand()%static_cast<int>(size)-1));
            auto end = chrono::high_resolution_clock::now();
            double duration = chrono::duration_cast<chrono::milliseconds>(end - start).count();
            total7 += duration;
        }

        int size = ptr_sizes[i];
        double addfirst    = total1 / (nexec * ntries);
        double addlast     = total2 / (nexec * ntries);
        double addrand     = total3 / (nexec * ntries);
        double removefisrt = total4 / (nexec * ntries);
        double removelast  = total5 / (nexec * ntries);
        double removerand  = total6 / (nexec * ntries);
        double getrand     = total7 / (nexec * ntries);
        fout << size << "," << addfirst << "," << addlast << "," << addrand << "," << removefisrt << "," << removelast << "," << removerand << "," << getrand << endl;
    }
    fout << "\n";
    fout.close();
}